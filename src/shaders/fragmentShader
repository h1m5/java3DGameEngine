#version 410 core

in vec2 UV;
in vec3 norm;
in vec3 vertToLight[4];
in vec3 vertToCamera;
in float visibility;

uniform sampler2D textureSampler;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

out vec4 fragColor;

void main(void){

    vec3 unitNormal = normalize(norm);
    vec3 unitVectorToCamera = normalize(vertToCamera);

    vec3 totalDiffuse = vec3(0.0);
    vec3 totalSpecular = vec3(0.0);
    for(int i = 0; i<4; i++){
        float distance = length(vertToLight[i]);
        float attFactor = attenuation[i].x + attenuation[i].y * distance + (attenuation[i].z * distance * distance);
        vec3 lDir = normalize(vertToLight[i]);
        float nDotL = max(dot(unitNormal, lDir), 0.1);

        vec3 lightDirection = -lDir;
        vec3 reflectedLight = reflect(lightDirection, unitNormal);
        vec3 halfVector = normalize(vertToCamera + lDir);

        //float specularFactor = max(dot(reflectedLight, unitVectorToCamera),0.0);
        float specularFactor = max(dot(unitNormal, halfVector),0.0);
        float dampedFactor = pow(specularFactor, shineDamper);
        totalDiffuse += (lightColour[i] * nDotL) / attFactor;
        totalSpecular += (dampedFactor * lightColour[i] * reflectivity) / attFactor;
    }

    totalDiffuse = max(totalDiffuse, 0.2);

    vec4 textureColour = texture(textureSampler, UV);
    if(textureColour.a < 0.5){
        discard;
    }

    fragColor = (vec4(totalDiffuse, 1.0f) + vec4(totalSpecular, 1.0)) * textureColour;
    fragColor = mix(vec4(skyColour,1.0), fragColor, visibility);
}